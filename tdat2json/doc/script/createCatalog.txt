// this is going to have to be run on a 64-bit server, there doesn't seem to be a way to make this work in 32-bit

// set necessary Array functions
Array.prototype.unique = function(b) {
    var a = [], i, l = this.length;
    for (i = 0; i < l; i++) {
        if (a.indexOf(this[i], 0, b) < 0) {
            a.push(this[i]);
        }
    }
    return a;
};

Array.prototype.remove = function(from, to) {
    var rest = this.slice((to || from) + 1 || this.length);
    this.length = from < 0 ? this.length + from : from;
    return this.push.apply(this, rest);
};

Array.prototype.containsPattern = function(pattern) {
    // if we don't return a pattern, result is false
    if (pattern == null) {
        return false;
    }
    // if we have an empty or null array, return false
    if (this.length == 0 || this == null) {
        return false;
    }
    // if this isn't an array, return false
    if (!(this instanceof Array)) {
        return false;
    }
    //loop through the values to see if we get a match. checkMe is a boolean that is true if match returns
    // something, but by default
    var checkMe = false;

    for (var i = 0; i < this.length; i++) {
        var newString = new String(this[i]);
        if (newString.search(pattern) != -1) {
            checkMe = true;
            break;
        }
    }

    return checkMe;
}

// add the empty xref array to all records.
db.catalog.update({}, {$set:{"xref":[]}}, false, true);

// add the dbref field to all records.
db.catalog.update({}, {$set:{"dbref":[]}},false, true);

// add the mediaref field to all records
db.catalog.update({},{$set:{"mediaref":[]}},false, true);





